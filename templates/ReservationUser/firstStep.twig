{% extends "base.html.twig" %}
{% block body %}
    {% embed 'Structure/Form/create_structure.html.twig' with {'title': 'Wprowadź dane'} %}
        {% block form_content %}
            {{ form_start(form) }}
            <div class="form-group">
                {{ form_label(form.pesel) }}
                {{ form_widget(form.pesel, {'attr': {'class': 'form-control'}}) }}
            </div>
            <div class="form-group">
                {{ form_label(form.referral_number) }}
                {{ form_widget(form.referral_number, {'attr': {'class': 'form-control'}}) }}
            </div>
            {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}}) }}

            {{ form_end(form) }}
        {% endblock %}
    {% endembed %}

    {% block javascript %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const referralNumberInput = document.querySelector('[id$="_referral_number"]');
        const peselInput = document.querySelector('[id$="_pesel"]');
        const form = document.querySelector('form');
        const referralErrorMessage = document.createElement('div');
        referralErrorMessage.style.color = 'red';
        referralErrorMessage.textContent = 'Nieprawidłowy numer skierowania. Wprowadź numer w formacie 00/00/123456/A/P0';

        const peselErrorMessage = document.createElement('div');
        peselErrorMessage.style.color = 'red';
        peselErrorMessage.textContent = 'Nieprawidłowy numer PESEL. Wprowadź poprawny 11-cyfrowy numer PESEL';

        function validateReferralNumber(value) {
            const pattern = /^\d{2}\/\d{2}\/\d{6}\/[A-Za-z]\/[A-Za-z]\d{1,2}$/;
            return pattern.test(value);
        }

    function validatePesel(value) {
    const pattern = /^\d{11}$/;
    if (!pattern.test(value)) {
    return false;
}

    // Extract birth date from PESEL
    let year = parseInt(value.substring(0, 2), 10);
    let month = parseInt(value.substring(2, 4), 10);
    let day = parseInt(value.substring(4, 6), 10);

    if (month > 20) {
    year += 2000;
    month -= 20;
} else if (month > 80) {
    year += 1800;
    month -= 80;
} else if (month > 60) {
    year += 2200;
    month -= 60;
} else if (month > 40) {
    year += 2100;
    month -= 40;
} else {
    year += 1900;
}

    const birthDate = new Date(year, month - 1, day);
    if (!(birthDate.getFullYear() === year && birthDate.getMonth() === month - 1 && birthDate.getDate() === day)) {
    return false;
}

    // Check the control sum
    const weights = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3];
    let sum = 0;

    for (let i = 0; i < weights.length; i++) {
    sum += weights[i] * value[i];
}

    sum %= 10;
    sum = 10 - sum;
    sum %= 10;

    return sum === parseInt(value[10]);
}

        function updateInputStyle(input, isValid) {
            if (isValid) {
                input.style.borderColor = '';
                input.style.backgroundColor = '';
            } else {
                input.style.borderColor = 'red';
                input.style.backgroundColor = '#ffe6e6';
            }
        }

        if (referralNumberInput) {
            referralNumberInput.addEventListener('input', function(event) {
                const input = event.target;
                let value = input.value.replace(/[^0-9A-Za-z]/g, '');

                if (value.length > 2) {
                    value = value.slice(0, 2) + '/' + value.slice(2);
                }

                if (value.length > 5) {
                    value = value.slice(0, 5) + '/' + value.slice(5);
                }

                if (value.length > 12) {
                    value = value.slice(0, 12) + '/' + value.slice(12);
                }

                if (value.length > 14) {
                    value = value.slice(0, 14) + '/' + value.slice(14);
                }

                input.value = value;

                const isValid = validateReferralNumber(value);
                updateInputStyle(input, isValid);

                if (isValid && document.contains(referralErrorMessage)) {
                    referralErrorMessage.remove();
                }
            });
        }

        if (peselInput) {
            peselInput.addEventListener('input', function(event) {
                const input = event.target;
                let value = input.value.replace(/[^0-9]/g, '');

                input.value = value;

                const isValid = validatePesel(value);
                updateInputStyle(input, isValid);

                if (isValid && document.contains(peselErrorMessage)) {
                    peselErrorMessage.remove();
                }
            });
        }

        form.addEventListener('submit', function(event) {
            const isReferralValid = validateReferralNumber(referralNumberInput.value);
            const isPeselValid = validatePesel(peselInput.value);

            if (!isReferralValid) {
                event.preventDefault();
                if (!document.contains(referralErrorMessage)) {
                    referralNumberInput.parentNode.insertBefore(referralErrorMessage, referralNumberInput.nextSibling);
                }
            } else {
                if (document.contains(referralErrorMessage)) {
                    referralErrorMessage.remove();
                }
            }

            if (!isPeselValid) {
                event.preventDefault();
                if (!document.contains(peselErrorMessage)) {
                    peselInput.parentNode.insertBefore(peselErrorMessage, peselInput.nextSibling);
                }
            } else {
                if (document.contains(peselErrorMessage)) {
                    peselErrorMessage.remove();
                }
            }
        });
    });
</script>
{% endblock %}
{% endblock %}